#!/bin/bash

function display_usage()
{
  echo "Usage : $0 (optional -c <path to config file>)"
}

while getopts c:h flag
do
    case "${flag}" in
        c) readonly CONFIG_FILE=${OPTARG};;
        h) display_usage;exit;;
    esac
done

if [[ -z ${CONFIG_FILE} ]]; then
  display_usage
  exit 1
fi
    
[[ -z ${CONFIG_FILE} ]] && CONFIG_FILE=sherlock.config

source ${CONFIG_FILE}

if [ "$(uname -s)" == "Linux" ];then
  if [[ "${WORKERS_LIST_FILE}" == "${SDS_LIST_FILE}" ]]; then
    mapfile -t worker_node_array < <(cat ${WORKERS_LIST_FILE})
  else
    mapfile -t worker_node_array < <(cat ${WORKERS_LIST_FILE})
    mapfile -t sds_node_array < <(cat ${SDS_LIST_FILE})
  fi
else
  if [[ "${WORKERS_LIST_FILE}" == "${SDS_LIST_FILE}" ]]; then
    declare -a worker_node_array
    while IFS= read -r line; do worker_node_array+=("$line"); done < <(cat ${WORKERS_LIST_FILE})
  else
    declare -a worker_node_array
    while IFS= read -r line; do worker_node_array+=("$line"); done < <(cat ${WORKERS_LIST_FILE})
    declare -a sds_node_array
    while IFS= read -r line; do sds_node_array+=("$line"); done < <(cat ${SDS_LIST_FILE})
  fi
fi

function mydate()
{
 date +%Y%m%d:%H:%M:%S:
}

function create_service()
{
  case "${DB_TYPE}" in
    postgresql)
      port_number=5432
      ;;
    mysql)
      port_number=3306
      ;;
    sqlserver)
      port_number=1433
      ;;
    mongodb)
      port_number=27017
      ;;
    *)
      echo "Unknown database type..."
  esac

  cat <<EOF | ${KUBE_CMD} -n ${NAMESPACE_NAME} create -f -
apiVersion: v1
kind: Service
metadata:
  name: ${pod_name}
  labels:
    app: ${pod_name}
  namespace: ${NAMESPACE_NAME}
spec:
  type: ClusterIP
  ports:
   - port: ${port_number}
  selector:
   app: ${pod_name}
EOF
}


function create_pvc()
{
  cat <<EOF | ${KUBE_CMD} -n ${NAMESPACE_NAME} create -f -
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${pvc_name}
  namespace: ${NAMESPACE_NAME}
spec:
  storageClassName: ${STORAGE_CLASS}
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: ${PVC_SIZE}
EOF
}

function create_postgresql()
{
  cat <<EOF | ${KUBE_CMD} -n ${NAMESPACE_NAME} create -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${pod_name}
  namespace: ${NAMESPACE_NAME}
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app: ${pod_name}
  template:
    metadata:
      labels:
        app: ${pod_name}
    spec:
      nodeSelector:
        kubernetes.io/hostname: ${node_name}
      containers:
      - name: ${pod_name}
        image: postgres:11.7
#        args: ["-c", "max_connections=100" , "-c", "shared_buffers=4096MB"]
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 5432
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgresqldb
        env:
          - name: POSTGRES_PASSWORD
            value: ${DB_PASSWORD}
          - name: POSTGRES_USER
            value: ${DB_USERNAME}
          - name: POSTGRES_DB
            value: ${DB_NAME}
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: ${DB_POD_MEM}
            cpu: ${DB_POD_CPU}
          limits:
            memory: ${DB_POD_MEM}
            cpu: ${DB_POD_CPU}
      volumes:
      - name: postgresqldb
        persistentVolumeClaim:
          claimName: ${pvc_name}
EOF
}

function create_mongodb()
{
  cat <<EOF | ${KUBE_CMD} -n ${NAMESPACE_NAME} create -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${pod_name}
  namespace: ${NAMESPACE_NAME}
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app: ${pod_name}
  template:
    metadata:
      labels:
        app: ${pod_name}
    spec:
      nodeSelector:
        kubernetes.io/hostname: ${node_name}
      containers:
      - name: ${pod_name}
        image: mongo:latest
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 27017
        volumeMounts:
        - mountPath: /data/db
          name: mongodb
        - mountPath: /docker-entrypoint-initdb.d
          name: prep-ycsb
        env:
          - name: MONGO_INITDB_ROOT_PASSWORD
            value: ${DB_PASSWORD}
          - name: MONGO_INITDB_ROOT_USERNAME
            value: ${DB_USERNAME}
          - name: MONGO_INITDB_DATABASE
            value: ${DB_NAME}
        resources:
          requests:
            memory: ${DB_POD_MEM}
            cpu: ${DB_POD_CPU}
          limits:
            memory: ${DB_POD_MEM}
            cpu: ${DB_POD_CPU}
      volumes:
      - name: mongodb
        persistentVolumeClaim:
          claimName: ${pvc_name}
      - name: prep-ycsb
        configMap:
          name: prep-ycsb
EOF
}

function create_mysql_config_map()
{
  cat <<EOF | ${KUBE_CMD} -n ${NAMESPACE_NAME} create -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-custom-config
  namespace: ${NAMESPACE_NAME}
data:
  mysql.ocs.cnf: |
    [mysqld]
    skip-host-cache
    skip-name-resolve
    innodb_buffer_pool_size = 1G
    default_authentication_plugin = mysql_native_password
    [mysqldump]
    quick
    quote-names
    max_allowed_packet  = 16M
EOF
}

function create_mongodb_config_map()
{
  cat <<EOF | ${KUBE_CMD} -n ${NAMESPACE_NAME} create -f -
apiVersion: v1
kind: ConfigMap
metadata:
  name: prep-ycsb
  namespace: ${NAMESPACE_NAME}
data:
  ensure-users.js: |
    db.createUser({
      user: '${DB_USERNAME}',
      pwd: '${DB_PASSWORD}',
      roles: [
        {
          role: 'readWrite',
          db: '${DB_NAME}'
        }
      ]
    });
EOF
}

function create_mysql()
{
  cat <<EOF | ${KUBE_CMD} -n ${NAMESPACE_NAME} create -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${pod_name}
  namespace: ${NAMESPACE_NAME}
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app: ${pod_name}
  template:
    metadata:
      labels:
        app: ${pod_name}
    spec:
      nodeSelector:
        kubernetes.io/hostname: ${node_name}
      containers:
      - name: ${pod_name}
        image: mysql:8.0
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 3306
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysqldb
        - mountPath: /etc/mysql/conf.d
          name: mysql-custom-config
        env:
          - name: MYSQL_ROOT_PASSWORD
            value: ${DB_PASSWORD}
          - name: MYSQL_DATABASE
            value: ${DB_NAME}
          - name: MYSQL_USER
            value: ${DB_USERNAME}
          - name: MYSQL_PASSWORD
            value: ${DB_PASSWORD}
        resources:
          requests:
            memory: ${DB_POD_MEM}
            cpu: ${DB_POD_CPU}
          limits:
            memory: ${DB_POD_MEM}
            cpu: ${DB_POD_CPU}
      volumes:
      - name: mysqldb
        persistentVolumeClaim:
          claimName: ${pvc_name}
      - name: mysql-custom-config
        configMap:
          name: mysql-custom-config
EOF
}

function create_sqlserver()
{
  cat <<EOF | ${KUBE_CMD} -n ${NAMESPACE_NAME} create -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${pod_name}
  namespace: ${NAMESPACE_NAME}
spec:
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  replicas: 1
  selector:
    matchLabels:
      app: ${pod_name}
  template:
    metadata:
      labels:
        app: ${pod_name}
    spec:
      terminationGracePeriodSeconds: 10
      nodeSelector:
        kubernetes.io/hostname: ${node_name}
      containers:
      - name: ${pod_name}
        image: mcr.microsoft.com/mssql/rhel/server:2019-latest
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 1433
        volumeMounts:
        - mountPath: /var/opt/mssql
          name: sqlserverdb
        env:
          - name: MSSQL_PID
            value: "Developer"
          - name: ACCEPT_EULA
            value: "Y"
          - name: MSSQL_SA_PASSWORD
            valueFrom:
              secretKeyRef:
                name: sqlserver
                key: SA_PASSWORD
        resources:
          requests:
            memory: ${DB_POD_MEM}
            cpu: ${DB_POD_CPU}
          limits:
            memory: ${DB_POD_MEM}
            cpu: ${DB_POD_CPU}
      volumes:
      - name: sqlserverdb
        persistentVolumeClaim:
          claimName: ${pvc_name}
EOF
}

function create_secret()
{
 oc create secret generic sqlserver --from-literal=SA_PASSWORD=${SA_PASSWORD} -n ${NAMESPACE_NAME}
}

function create_all_pvc()
{
  echo "$(mydate) Creating all PVCs first..."
  for ((j=0; j<=${DB_PER_WORKER}*${NUMBER_OF_WORKERS}-1; j++))
  do
    pvc_name=${DB_PVC_PREFIX}-${j}
    echo "$(mydate) Creating PVC ${pvc_name}"
    create_pvc
  done
}

function wait_for_ready_pvc()
{
  echo "$(mydate) Checking that all PVCs are Bound..."
  total_number_of_pod=$((DB_PER_WORKER * NUMBER_OF_WORKERS))
  while [[ $(${KUBE_CMD} -n ${NAMESPACE_NAME} get pvc -o=jsonpath='{range .items[?(@.status.phase=="Bound")]}{.status.phase}' -o go-template='{{len .items}}') -ne ${total_number_of_pod} ]]
  do
    echo "$(mydate) Waiting for all PVCs to Bound..."
    sleep 1
  done
}

if ! ${KUBE_CMD} get namespaces|grep -w ${NAMESPACE_NAME} > /dev/null; then 
  if [[ "${KUBE_CMD}" == "oc" ]]; then
    ${KUBE_CMD} new-project ${NAMESPACE_NAME}
  else
    ${KUBE_CMD} create namespace ${NAMESPACE_NAME}
  fi
fi

if [[ "${DB_TYPE}" == "mysql" ]]; then
  if [[ ! $(${KUBE_CMD} -n ${NAMESPACE_NAME} get configmap --no-headers -o custom-columns=:metadata.name) == "mysql-custom-config" ]]; then
    echo "$(mydate) Creating MySQL configfile ..."
    create_mysql_config_map
  fi
  if [[ "${KUBE_CMD}" == "oc" ]]; then
    echo "$(mydate) Making sure group scc is set for MySQL pods in Openshift..."
    oc adm policy add-scc-to-group anyuid system:authenticated -n${NAMESPACE_NAME}
  fi
fi

if [[ "${DB_TYPE}" == "sqlserver" ]]; then
  create_secret
fi

if [[ "${DB_TYPE}" == "mongodb" ]]; then
  create_mongodb_config_map
fi

create_all_pvc
wait_for_ready_pvc

for ((j=0; j<=${DB_PER_WORKER}*${NUMBER_OF_WORKERS}-1; j++))
do
  node_number=$((j%NUMBER_OF_WORKERS))
  node_name=$(${KUBE_CMD} get node ${worker_node_array[${node_number}]} -o jsonpath='{.metadata.labels.kubernetes\.io/hostname}')
  pod_name=${DB_POD_PREFIX}-${j}
  pvc_name=${DB_PVC_PREFIX}-${j}
  echo "$(mydate) Creating ${DB_TYPE} database pod ${pod_name} on node ${node_name}"
  case "${DB_TYPE}" in
    postgresql) 
      create_postgresql
      create_service
      ;;
    mysql)
      create_mysql
      create_service
      ;;
    sqlserver)
      create_sqlserver
      create_service
      ;;
    mongodb)
      create_mongodb
      create_service
      ;;
    *)
      echo "Unknown database type..."
  esac
  if [[ "${WAIT_FOR_KUBE_CMD}" == "true" ]]; then
    ${KUBE_CMD} -n ${NAMESPACE_NAME} wait --for=condition=Ready pod -l app=${pod_name} --timeout=120s
  fi
done
